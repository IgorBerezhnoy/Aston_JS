// 1. Написать ответ - почему массивы в JS являются "неправильными" и совмещают в себе несколько
// структур данных? Какие ?

//Массивы в JavaScript иногда называют "неправильными" из-за их гибкости и способности выполнять функции
// нескольких структур данных. Это связано с тем, что:
//
// Массивы динамичны:
// В отличие от многих других языков программирования, где размер массива фиксирован,
// в JavaScript массивы могут динамически изменять размер.
//
// Могут содержать разные типы данных:
// В одном массиве могут храниться данные различных типов, что нехарактерно для строго типизированных языков.
//
// Ассоциативные массивы:
// Массивы в JavaScript могут использоваться как ассоциативные массивы (объекты),
// хранящие данные в парах ключ-значение, где ключами могут быть строки.
//
// Стек или очередь:
// Методы добавления и удаления элементов позволяют использовать массивы для имитации структур данных,
// таких как стеки и очереди.
//
//Список элементов:
// Массив может содержать упорядоченный список значений любого типа данных.
//
// Хэш-таблицу:
// Массивы могут также содержать произвольные свойства, которые не являются целочисленными индексами.
// Это позволяет использовать массивы в качестве простых хэш-таблиц и ассоциативных массивов.
//
// Эта гибкость делает массивы в JavaScript мощным инструментом,
// но также может привести к неоднозначностям и ошибкам, если не понимать, как они работают.


//2. Привязать контекст объекта:
const obj = {item: 'some value'};

function logger() {
  console.log(`I output only external context: ${this.item}`);
}
logger.call(obj);
logger.apply(obj);
logger.bind(obj)();